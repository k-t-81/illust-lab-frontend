import Head from 'next/head';
import { initUrqlClient, withUrqlClient } from 'next-urql';
import { nextUrqlClientConfig } from '@/configs/urql';
import { ssrExchange } from 'urql';
import {
  ReadIllustrationGroupDocument,
  ReadIllustrationGroupsDocument,
  ReadIllustrationsDocument,
  useCreateIllustrationGroupMutation,
  useDeleteIllustrationGroupMutation,
  useGenerateControlnetIllustrationMutation,
  useGenerateImg2ImgIllustrationMutation,
  useGenerateTxt2ImgIllustrationMutation,
  useReadIllustrationGroupQuery,
  useReadIllustrationGroupsQuery,
  useReadIllustrationsQuery,
  useUpdateIllustrationGroupMutation,
} from '@/graphql/graphql';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';
import { IllustrationGroup } from '@/templates/IllustrationGroup';

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { groupId, groupsOffset, illustrationsOffset } = ctx.query;
  const groupsOffsetNumber = Number(groupsOffset) || 0;
  const illustrationOffsetNumber = Number(illustrationsOffset) || 0;
  const groupIdNumber = Number(groupId) || 0;

  const ssrCache = ssrExchange({ isClient: false });
  const client = initUrqlClient(nextUrqlClientConfig(ssrCache), false);
  await client.query(ReadIllustrationGroupsDocument, { offset: groupsOffsetNumber }).toPromise();
  await client.query(ReadIllustrationGroupDocument, { id: groupIdNumber }).toPromise();
  await client
    .query(ReadIllustrationsDocument, { groupId: groupIdNumber, offset: illustrationOffsetNumber })
    .toPromise();

  return {
    props: {
      urqlState: ssrCache.extractData(),
    },
  };
};

const Groups = () => {
  const router = useRouter();
  const { groupId, groupsOffset, illustrationsOffset } = router.query;
  const groupsOffsetNumber = Number(groupsOffset) || 0;
  const groupIdNumber = Number(groupId) || 0;
  const illustrationsOffsetNumber = Number(illustrationsOffset) || 0;
  const [groups, refetchGroups] = useReadIllustrationGroupsQuery({ variables: { offset: groupsOffsetNumber } });
  const [group] = useReadIllustrationGroupQuery({ variables: { id: groupIdNumber } });
  const [createGroupState, createGroup] = useCreateIllustrationGroupMutation();
  const [updateGroupState, updateGroup] = useUpdateIllustrationGroupMutation();
  const [deleteGroupState, deleteGroup] = useDeleteIllustrationGroupMutation();
  const [illustrations, refetchIllustrations] = useReadIllustrationsQuery({
    variables: { groupId: groupIdNumber, offset: illustrationsOffsetNumber },
  });
  const allIllustrations = illustrations?.data?.readIllustrations;
  const illustrationsCount = illustrations?.data?.readIllustrationsCount ?? 0;
  const [generateTxt2ImgState, generateTxt2Img] = useGenerateTxt2ImgIllustrationMutation();
  const [generateImg2ImgState, generateImg2Img] = useGenerateImg2ImgIllustrationMutation();
  const [generateControlnetState, generateControlnet] = useGenerateControlnetIllustrationMutation();
  const loading =
    groups.fetching ||
    group.fetching ||
    illustrations.fetching ||
    createGroupState.fetching ||
    updateGroupState.fetching ||
    deleteGroupState.fetching ||
    generateTxt2ImgState.fetching ||
    generateImg2ImgState.fetching ||
    generateControlnetState.fetching;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <IllustrationGroup
          groups={groups}
          group={group}
          onGroupCreate={createGroup}
          onGroupUpdate={updateGroup}
          onGroupDelete={deleteGroup}
          refetchGroups={refetchGroups}
          illustrations={allIllustrations}
          illustrationsCount={illustrationsCount}
          loading={loading}
          groupId={groupIdNumber}
          onTxt2ImgGenerate={generateTxt2Img}
          onImg2ImgGenerate={generateImg2Img}
          onControlnetGenerate={generateControlnet}
          refetchIllustrations={refetchIllustrations}
        />
      </main>
    </>
  );
};

export default withUrqlClient(nextUrqlClientConfig)(Groups);
